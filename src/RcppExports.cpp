// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// survLm_fit
List survLm_fit(arma::colvec y, arma::mat X, arma::colvec weights);
RcppExport SEXP _rpms_survLm_fit(SEXP ySEXP, SEXP XSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(survLm_fit(y, X, weights));
    return rcpp_result_gen;
END_RCPP
}
// survLm_model
List survLm_model(arma::colvec y, arma::mat X, arma::colvec weights, arma::uvec strata, arma::uvec clusters);
RcppExport SEXP _rpms_survLm_model(SEXP ySEXP, SEXP XSEXP, SEXP weightsSEXP, SEXP strataSEXP, SEXP clustersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type strata(strataSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type clusters(clustersSEXP);
    rcpp_result_gen = Rcpp::wrap(survLm_model(y, X, weights, strata, clusters));
    return rcpp_result_gen;
END_RCPP
}
// null_split
List null_split();
RcppExport SEXP _rpms_null_split() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(null_split());
    return rcpp_result_gen;
END_RCPP
}
// rbind_splits
List rbind_splits(List split1, List split2);
RcppExport SEXP _rpms_rbind_splits(SEXP split1SEXP, SEXP split2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type split1(split1SEXP);
    Rcpp::traits::input_parameter< List >::type split2(split2SEXP);
    rcpp_result_gen = Rcpp::wrap(rbind_splits(split1, split2));
    return rcpp_result_gen;
END_RCPP
}
// get_node
List get_node(arma::uword node, int cat, std::string vname, arma::colvec y, arma::colvec weights, arma::vec mxval, arma::uvec s, List modfit);
RcppExport SEXP _rpms_get_node(SEXP nodeSEXP, SEXP catSEXP, SEXP vnameSEXP, SEXP ySEXP, SEXP weightsSEXP, SEXP mxvalSEXP, SEXP sSEXP, SEXP modfitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< int >::type cat(catSEXP);
    Rcpp::traits::input_parameter< std::string >::type vname(vnameSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mxval(mxvalSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type s(sSEXP);
    Rcpp::traits::input_parameter< List >::type modfit(modfitSEXP);
    rcpp_result_gen = Rcpp::wrap(get_node(node, cat, vname, y, weights, mxval, s, modfit));
    return rcpp_result_gen;
END_RCPP
}
// get_loss
double get_loss(double x, arma::vec& x_val, arma::colvec& y, arma::mat& mX, arma::colvec& weights);
RcppExport SEXP _rpms_get_loss(SEXP xSEXP, SEXP x_valSEXP, SEXP ySEXP, SEXP mXSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x_val(x_valSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(get_loss(x, x_val, y, mX, weights));
    return rcpp_result_gen;
END_RCPP
}
// small_loss
List small_loss(arma::vec& x_val, arma::vec& uq_xs, arma::colvec& y, arma::mat& mX, arma::colvec& weights, double Lx, double Ux, double Lloss, double Uloss, arma::uword gridpts);
RcppExport SEXP _rpms_small_loss(SEXP x_valSEXP, SEXP uq_xsSEXP, SEXP ySEXP, SEXP mXSEXP, SEXP weightsSEXP, SEXP LxSEXP, SEXP UxSEXP, SEXP LlossSEXP, SEXP UlossSEXP, SEXP gridptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type x_val(x_valSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type uq_xs(uq_xsSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< double >::type Lx(LxSEXP);
    Rcpp::traits::input_parameter< double >::type Ux(UxSEXP);
    Rcpp::traits::input_parameter< double >::type Lloss(LlossSEXP);
    Rcpp::traits::input_parameter< double >::type Uloss(UlossSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type gridpts(gridptsSEXP);
    rcpp_result_gen = Rcpp::wrap(small_loss(x_val, uq_xs, y, mX, weights, Lx, Ux, Lloss, Uloss, gridpts));
    return rcpp_result_gen;
END_RCPP
}
// small_loss_cat
List small_loss_cat(arma::imat& sets, arma::vec& cats, arma::vec& x_val, arma::colvec& y, arma::mat& mX, arma::colvec& weights, std::vector<arma::uvec> cat_ind, arma::uword Lx, arma::uword Ux, double Lloss, double Uloss, arma::uword gridpts);
RcppExport SEXP _rpms_small_loss_cat(SEXP setsSEXP, SEXP catsSEXP, SEXP x_valSEXP, SEXP ySEXP, SEXP mXSEXP, SEXP weightsSEXP, SEXP cat_indSEXP, SEXP LxSEXP, SEXP UxSEXP, SEXP LlossSEXP, SEXP UlossSEXP, SEXP gridptsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat& >::type sets(setsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type cats(catsSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type x_val(x_valSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< arma::colvec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< std::vector<arma::uvec> >::type cat_ind(cat_indSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type Lx(LxSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type Ux(UxSEXP);
    Rcpp::traits::input_parameter< double >::type Lloss(LlossSEXP);
    Rcpp::traits::input_parameter< double >::type Uloss(UlossSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type gridpts(gridptsSEXP);
    rcpp_result_gen = Rcpp::wrap(small_loss_cat(sets, cats, x_val, y, mX, weights, cat_ind, Lx, Ux, Lloss, Uloss, gridpts));
    return rcpp_result_gen;
END_RCPP
}
// split_rpms
List split_rpms(arma::uword node, arma::colvec y, arma::mat mX, arma::mat X, Rcpp::StringVector vnames, arma::uvec cat_vec, arma::colvec weights, arma::uvec strata, arma::uvec clusters, arma::uvec des_ind, arma::uword& bin_size, arma::uword& gridpts, arma::uword& perm_reps, float& pval);
RcppExport SEXP _rpms_split_rpms(SEXP nodeSEXP, SEXP ySEXP, SEXP mXSEXP, SEXP XSEXP, SEXP vnamesSEXP, SEXP cat_vecSEXP, SEXP weightsSEXP, SEXP strataSEXP, SEXP clustersSEXP, SEXP des_indSEXP, SEXP bin_sizeSEXP, SEXP gridptsSEXP, SEXP perm_repsSEXP, SEXP pvalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type vnames(vnamesSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cat_vec(cat_vecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type strata(strataSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type des_ind(des_indSEXP);
    Rcpp::traits::input_parameter< arma::uword& >::type bin_size(bin_sizeSEXP);
    Rcpp::traits::input_parameter< arma::uword& >::type gridpts(gridptsSEXP);
    Rcpp::traits::input_parameter< arma::uword& >::type perm_reps(perm_repsSEXP);
    Rcpp::traits::input_parameter< float& >::type pval(pvalSEXP);
    rcpp_result_gen = Rcpp::wrap(split_rpms(node, y, mX, X, vnames, cat_vec, weights, strata, clusters, des_ind, bin_size, gridpts, perm_reps, pval));
    return rcpp_result_gen;
END_RCPP
}
// random_split2
List random_split2(arma::uword node, arma::colvec y, arma::mat mX, arma::mat X, Rcpp::StringVector vnames, arma::uvec cat_vec, arma::colvec weights, arma::uvec strata, arma::uvec clusters, arma::uvec des_ind, arma::uword& bin_size);
RcppExport SEXP _rpms_random_split2(SEXP nodeSEXP, SEXP ySEXP, SEXP mXSEXP, SEXP XSEXP, SEXP vnamesSEXP, SEXP cat_vecSEXP, SEXP weightsSEXP, SEXP strataSEXP, SEXP clustersSEXP, SEXP des_indSEXP, SEXP bin_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type vnames(vnamesSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cat_vec(cat_vecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type strata(strataSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type des_ind(des_indSEXP);
    Rcpp::traits::input_parameter< arma::uword& >::type bin_size(bin_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(random_split2(node, y, mX, X, vnames, cat_vec, weights, strata, clusters, des_ind, bin_size));
    return rcpp_result_gen;
END_RCPP
}
// random_split
List random_split(arma::uword node, arma::colvec y, arma::mat mX, arma::mat X, Rcpp::StringVector vnames, arma::uvec cat_vec, arma::colvec weights, arma::uvec strata, arma::uvec clusters, arma::uvec des_ind, arma::uword& bin_size, arma::uvec randv);
RcppExport SEXP _rpms_random_split(SEXP nodeSEXP, SEXP ySEXP, SEXP mXSEXP, SEXP XSEXP, SEXP vnamesSEXP, SEXP cat_vecSEXP, SEXP weightsSEXP, SEXP strataSEXP, SEXP clustersSEXP, SEXP des_indSEXP, SEXP bin_sizeSEXP, SEXP randvSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uword >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type vnames(vnamesSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type cat_vec(cat_vecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type strata(strataSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type clusters(clustersSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type des_ind(des_indSEXP);
    Rcpp::traits::input_parameter< arma::uword& >::type bin_size(bin_sizeSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type randv(randvSEXP);
    rcpp_result_gen = Rcpp::wrap(random_split(node, y, mX, X, vnames, cat_vec, weights, strata, clusters, des_ind, bin_size, randv));
    return rcpp_result_gen;
END_RCPP
}
// clus_perm
arma::mat clus_perm(arma::vec res, arma::uword C, std::vector <arma::uvec> clus_indx, arma::vec effs, arma::uword M);
RcppExport SEXP _rpms_clus_perm(SEXP resSEXP, SEXP CSEXP, SEXP clus_indxSEXP, SEXP effsSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type C(CSEXP);
    Rcpp::traits::input_parameter< std::vector <arma::uvec> >::type clus_indx(clus_indxSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type effs(effsSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(clus_perm(res, C, clus_indx, effs, M));
    return rcpp_result_gen;
END_RCPP
}
// perm
arma::mat perm(arma::vec res, arma::uword M);
RcppExport SEXP _rpms_perm(SEXP resSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type res(resSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(perm(res, M));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rpms_survLm_fit", (DL_FUNC) &_rpms_survLm_fit, 3},
    {"_rpms_survLm_model", (DL_FUNC) &_rpms_survLm_model, 5},
    {"_rpms_null_split", (DL_FUNC) &_rpms_null_split, 0},
    {"_rpms_rbind_splits", (DL_FUNC) &_rpms_rbind_splits, 2},
    {"_rpms_get_node", (DL_FUNC) &_rpms_get_node, 8},
    {"_rpms_get_loss", (DL_FUNC) &_rpms_get_loss, 5},
    {"_rpms_small_loss", (DL_FUNC) &_rpms_small_loss, 10},
    {"_rpms_small_loss_cat", (DL_FUNC) &_rpms_small_loss_cat, 12},
    {"_rpms_split_rpms", (DL_FUNC) &_rpms_split_rpms, 14},
    {"_rpms_random_split2", (DL_FUNC) &_rpms_random_split2, 11},
    {"_rpms_random_split", (DL_FUNC) &_rpms_random_split, 12},
    {"_rpms_clus_perm", (DL_FUNC) &_rpms_clus_perm, 5},
    {"_rpms_perm", (DL_FUNC) &_rpms_perm, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_rpms(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
